// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "db/lists.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message List
 */
export interface List {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: int64 cycleDurationDays = 2;
     */
    cycleDurationDays: bigint;
    /**
     * @generated from protobuf field: int64 startDate = 3;
     */
    startDate: bigint;
    /**
     * @generated from protobuf field: int64 userId = 4;
     */
    userId: bigint;
    /**
     * @generated from protobuf field: repeated int64 contactIds = 5;
     */
    contactIds: bigint[];
}
// @generated message type with reflection information, may provide speed optimized methods
class List$Type extends MessageType<List> {
    constructor() {
        super("List", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "cycleDurationDays", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "startDate", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "userId", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "contactIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<List>): List {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.cycleDurationDays = 0n;
        message.startDate = 0n;
        message.userId = 0n;
        message.contactIds = [];
        if (value !== undefined)
            reflectionMergePartial<List>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: List): List {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 cycleDurationDays */ 2:
                    message.cycleDurationDays = reader.int64().toBigInt();
                    break;
                case /* int64 startDate */ 3:
                    message.startDate = reader.int64().toBigInt();
                    break;
                case /* int64 userId */ 4:
                    message.userId = reader.int64().toBigInt();
                    break;
                case /* repeated int64 contactIds */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.contactIds.push(reader.int64().toBigInt());
                    else
                        message.contactIds.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: List, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 cycleDurationDays = 2; */
        if (message.cycleDurationDays !== 0n)
            writer.tag(2, WireType.Varint).int64(message.cycleDurationDays);
        /* int64 startDate = 3; */
        if (message.startDate !== 0n)
            writer.tag(3, WireType.Varint).int64(message.startDate);
        /* int64 userId = 4; */
        if (message.userId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.userId);
        /* repeated int64 contactIds = 5; */
        if (message.contactIds.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.contactIds.length; i++)
                writer.int64(message.contactIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message List
 */
export const List = new List$Type();
