// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "routes/api/v1/nodes/by-path.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Node } from "../../../../db/nodes";
import { ApiError } from "../../../../api";
/**
 * @generated from protobuf message GetNodesByPathRequestV1
 */
export interface GetNodesByPathRequestV1 {
    /**
     * @generated from protobuf field: bool includeChildren = 1;
     */
    includeChildren: boolean;
}
/**
 * @generated from protobuf message GetNodesByPathResponseV1
 */
export interface GetNodesByPathResponseV1 {
    /**
     * @generated from protobuf oneof: result
     */
    result: {
        oneofKind: "error";
        /**
         * @generated from protobuf field: ApiError error = 1;
         */
        error: ApiError;
    } | {
        oneofKind: "data";
        /**
         * @generated from protobuf field: GetNodesByPathResponseV1.Data data = 2;
         */
        data: GetNodesByPathResponseV1_Data;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: int32 status = 3;
     */
    status: number;
}
/**
 * @generated from protobuf message GetNodesByPathResponseV1.Data
 */
export interface GetNodesByPathResponseV1_Data {
    /**
     * @generated from protobuf field: Node node = 1;
     */
    node?: Node;
    /**
     * @generated from protobuf field: repeated Node children = 2;
     */
    children: Node[];
}
// @generated message type with reflection information, may provide speed optimized methods
class GetNodesByPathRequestV1$Type extends MessageType<GetNodesByPathRequestV1> {
    constructor() {
        super("GetNodesByPathRequestV1", [
            { no: 1, name: "includeChildren", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GetNodesByPathRequestV1>): GetNodesByPathRequestV1 {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.includeChildren = false;
        if (value !== undefined)
            reflectionMergePartial<GetNodesByPathRequestV1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetNodesByPathRequestV1): GetNodesByPathRequestV1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool includeChildren */ 1:
                    message.includeChildren = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetNodesByPathRequestV1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool includeChildren = 1; */
        if (message.includeChildren !== false)
            writer.tag(1, WireType.Varint).bool(message.includeChildren);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetNodesByPathRequestV1
 */
export const GetNodesByPathRequestV1 = new GetNodesByPathRequestV1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetNodesByPathResponseV1$Type extends MessageType<GetNodesByPathResponseV1> {
    constructor() {
        super("GetNodesByPathResponseV1", [
            { no: 1, name: "error", kind: "message", oneof: "result", T: () => ApiError },
            { no: 2, name: "data", kind: "message", oneof: "result", T: () => GetNodesByPathResponseV1_Data },
            { no: 3, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetNodesByPathResponseV1>): GetNodesByPathResponseV1 {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = { oneofKind: undefined };
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<GetNodesByPathResponseV1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetNodesByPathResponseV1): GetNodesByPathResponseV1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ApiError error */ 1:
                    message.result = {
                        oneofKind: "error",
                        error: ApiError.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).error)
                    };
                    break;
                case /* GetNodesByPathResponseV1.Data data */ 2:
                    message.result = {
                        oneofKind: "data",
                        data: GetNodesByPathResponseV1_Data.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).data)
                    };
                    break;
                case /* int32 status */ 3:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetNodesByPathResponseV1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ApiError error = 1; */
        if (message.result.oneofKind === "error")
            ApiError.internalBinaryWrite(message.result.error, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* GetNodesByPathResponseV1.Data data = 2; */
        if (message.result.oneofKind === "data")
            GetNodesByPathResponseV1_Data.internalBinaryWrite(message.result.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetNodesByPathResponseV1
 */
export const GetNodesByPathResponseV1 = new GetNodesByPathResponseV1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetNodesByPathResponseV1_Data$Type extends MessageType<GetNodesByPathResponseV1_Data> {
    constructor() {
        super("GetNodesByPathResponseV1.Data", [
            { no: 1, name: "node", kind: "message", T: () => Node },
            { no: 2, name: "children", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Node }
        ]);
    }
    create(value?: PartialMessage<GetNodesByPathResponseV1_Data>): GetNodesByPathResponseV1_Data {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.children = [];
        if (value !== undefined)
            reflectionMergePartial<GetNodesByPathResponseV1_Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetNodesByPathResponseV1_Data): GetNodesByPathResponseV1_Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Node node */ 1:
                    message.node = Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                case /* repeated Node children */ 2:
                    message.children.push(Node.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetNodesByPathResponseV1_Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Node node = 1; */
        if (message.node)
            Node.internalBinaryWrite(message.node, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated Node children = 2; */
        for (let i = 0; i < message.children.length; i++)
            Node.internalBinaryWrite(message.children[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetNodesByPathResponseV1.Data
 */
export const GetNodesByPathResponseV1_Data = new GetNodesByPathResponseV1_Data$Type();
