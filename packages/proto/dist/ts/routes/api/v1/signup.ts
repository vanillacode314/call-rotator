// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "routes/api/v1/signup.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ApiError } from "../../../api";
/**
 * @generated from protobuf message SignUpRequestV1
 */
export interface SignUpRequestV1 {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
}
/**
 * @generated from protobuf message SignUpResponseV1
 */
export interface SignUpResponseV1 {
    /**
     * @generated from protobuf oneof: result
     */
    result: {
        oneofKind: "error";
        /**
         * @generated from protobuf field: ApiError error = 1;
         */
        error: ApiError;
    } | {
        oneofKind: "data";
        /**
         * @generated from protobuf field: SignUpResponseV1.Data data = 2;
         */
        data: SignUpResponseV1_Data;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: int32 status = 3;
     */
    status: number;
}
/**
 * @generated from protobuf message SignUpResponseV1.Data
 */
export interface SignUpResponseV1_Data {
    /**
     * @generated from protobuf field: string token = 1;
     */
    token: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class SignUpRequestV1$Type extends MessageType<SignUpRequestV1> {
    constructor() {
        super("SignUpRequestV1", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SignUpRequestV1>): SignUpRequestV1 {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.email = "";
        message.password = "";
        if (value !== undefined)
            reflectionMergePartial<SignUpRequestV1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignUpRequestV1): SignUpRequestV1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignUpRequestV1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SignUpRequestV1
 */
export const SignUpRequestV1 = new SignUpRequestV1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignUpResponseV1$Type extends MessageType<SignUpResponseV1> {
    constructor() {
        super("SignUpResponseV1", [
            { no: 1, name: "error", kind: "message", oneof: "result", T: () => ApiError },
            { no: 2, name: "data", kind: "message", oneof: "result", T: () => SignUpResponseV1_Data },
            { no: 3, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SignUpResponseV1>): SignUpResponseV1 {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = { oneofKind: undefined };
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<SignUpResponseV1>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignUpResponseV1): SignUpResponseV1 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ApiError error */ 1:
                    message.result = {
                        oneofKind: "error",
                        error: ApiError.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).error)
                    };
                    break;
                case /* SignUpResponseV1.Data data */ 2:
                    message.result = {
                        oneofKind: "data",
                        data: SignUpResponseV1_Data.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).data)
                    };
                    break;
                case /* int32 status */ 3:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignUpResponseV1, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ApiError error = 1; */
        if (message.result.oneofKind === "error")
            ApiError.internalBinaryWrite(message.result.error, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* SignUpResponseV1.Data data = 2; */
        if (message.result.oneofKind === "data")
            SignUpResponseV1_Data.internalBinaryWrite(message.result.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SignUpResponseV1
 */
export const SignUpResponseV1 = new SignUpResponseV1$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignUpResponseV1_Data$Type extends MessageType<SignUpResponseV1_Data> {
    constructor() {
        super("SignUpResponseV1.Data", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SignUpResponseV1_Data>): SignUpResponseV1_Data {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.token = "";
        if (value !== undefined)
            reflectionMergePartial<SignUpResponseV1_Data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignUpResponseV1_Data): SignUpResponseV1_Data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token */ 1:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignUpResponseV1_Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token = 1; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SignUpResponseV1.Data
 */
export const SignUpResponseV1_Data = new SignUpResponseV1_Data$Type();
